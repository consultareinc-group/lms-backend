name: Deploy LMS Staging Backend to cPanel

on:
  push:
    branches:
      - staging # Trigger on push to the lms staging branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v2

      # Set up PHP
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"
          tools: composer, php-cs-fixer
          extensions: mbstring, xml, ctype, json, pdo, tokenizer, bcmath, gd
      
      # Clone interlinkiq-backend repository
      - name: Clone interlinkiq-backend repository
        run: |
          git clone https://USERNAME:${{ secrets.PERSONAL_TOKEN }}@github.com/consultareinc-group/interlinkiq-backend.git
          cd interlinkiq-backend
          git checkout base
          cd ../
          
          mkdir -p interlinkiq-backend/app/Http/Controllers/LMS
          
          # Move files EXCEPT the cloned repository itself
          shopt -s extglob  # Enable extended globbing
          mv !(interlinkiq-backend) interlinkiq-backend/app/Http/Controllers/LMS
          shopt -u extglob  # Disable extended globbing

      # Update CORS configuration
      - name: Update CORS settings
        run: |
          cd interlinkiq-backend
          sed -i "s|'allowed_origins' => \['\*'\]|'allowed_origins' => ['http://trainingace.pro', 'http://www.trainingace.pro']|" config/cors.php
          sed -i "s|'supports_credentials' => false|'supports_credentials' => true|" config/cors.php

      # Update JWT secret
      - name: Update JWT secret
        run: |
          cd interlinkiq-backend
          sed -i "s|'secret' => env('JWT_SECRET')|'secret' => '${{ secrets.JWT_SECRET }}'|" config/jwt.php

      # Update Mail configuration
      # - name: Update Mail settings
      #   run: |
      #     sed -i "s|'default' => env('MAIL_MAILER', 'smtp')|'default' => 'smtp'|" config/mail.php
      #     sed -i "s|'host' => env('MAIL_HOST', 'smtp.mailgun.org')|'host' => '${{ secrets.MAIL_HOST }}'|" config/mail.php
      #     sed -i "s|'port' => env('MAIL_PORT', 587)|'port' => 465|" config/mail.php
      #     sed -i "s|'encryption' => env('MAIL_ENCRYPTION', 'tls')|'encryption' => 'ssl'|" config/mail.php
      #     sed -i "s|'username' => env('MAIL_USERNAME')|'username' => '${{ secrets.MAIL_USERNAME }}'|" config/mail.php
      #     sed -i "s|'password' => env('MAIL_PASSWORD')|'password' => '${{ secrets.MAIL_PASSWORD }}'|" config/mail.php
      #     sed -i "s|'local_domain' => env('MAIL_EHLO_DOMAIN')|'local_domain' => '${{ secrets.MAIL_DOMAIN }}'|" config/mail.php
      #     sed -i "s|'path' => env('MAIL_SENDMAIL_PATH', '\/usr\/sbin\/sendmail -bs -i')|'path' => '/usr/sbin/sendmail -bs -i'|" config/mail.php
      #     sed -i "s|'channel' => env('MAIL_LOG_CHANNEL')|'channel' => 'stack'|" config/mail.php
      #     sed -i "s|'address' => env('MAIL_FROM_ADDRESS', 'hello@example.com')|'address' => '${{ secrets.MAIL_USERNAME }}'|" config/mail.php
      #     sed -i "s|'name' => env('MAIL_FROM_NAME', 'Example')|'name' => 'Vendor Match'|" config/mail.php

      # Update Database connections
      - name: Update Database settings
        run: |
          cd interlinkiq-backend
          sed -i "s|'default' => env('DB_CONNECTION', 'mysql')|'default' => 'mysql'|" config/database.php
          sed -i "s|'database' => 'cig_core_accounts_db'|'database' => '${{ secrets.STAGING_CIG_DB_NAME }}'|" config/database.php
          sed -i "s|'username' => 'root'|'username' => '${{ secrets.STAGING_CIG_DB_USERNAME }}'|" config/database.php
          STAGING_CIG_DB_PASSWORD=$(printf '%s' "${{ secrets.STAGING_CIG_DB_PASSWORD }}" | sed 's/[&/\]/\\&/g')
          sed -i "s|'password' => ''|'password' => '$STAGING_CIG_DB_PASSWORD'|" config/database.php
         
          sed -i "s|'system_database_connection'|'lms'|" config/database.php
          sed -i "s|'database' => 'system_database_name'|'database' => '${{ secrets.STAGING_LMS_DB_NAME }}'|" config/database.php
          sed -i "s|'username' => 'system_database_username'|'username' => '${{ secrets.STAGING_LMS_DB_USERNAME }}'|" config/database.php
          STAGING_LMS_DB_PASSWORD=$(printf '%s' "${{ secrets.STAGING_LMS_DB_PASSWORD }}" | sed 's/[&/\]/\\&/g')
          sed -i "s|'password' => 'system_database_password'|'password' => '$STAGING_LMS_DB_PASSWORD'|" config/database.php
   
      # Update Routes Api 
      - name: Update Routes Api settings
        run: |
          cd interlinkiq-backend
          sed -i "s|SystemName\SystemRouteController|LMS\LMSRouteController|" routes/api.php
          sed -i "s|SystemRouteController|LMSRouteController|" routes/api.php
    
      # Update Public paths
      - name: Update Public settings
        run: |
          cd interlinkiq-backend
          sed -i "s|/../storage/framework/maintenance.php|/raw_files/storage/framework/maintenance.php|" public/index.php
          sed -i "s|/../vendor/autoload.php|/raw_files/vendor/autoload.php|" public/index.php
          sed -i "s|/../bootstrap/app.php|/raw_files/bootstrap/app.php|" public/index.php

      # Deploy to cPanel using  SSH
      - name: Deploy to cPanel
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          CPANEL_HOST: ${{ secrets.CPANEL_HOST }}
          CPANEL_USER: ${{ secrets.CPANEL_USER }}
          SSH_PORT: ${{ secrets.CPANEL_PORT }}
        run: |
          cd interlinkiq-backend
          # Start SSH agent
          eval "$(ssh-agent -s)"

          # Add SSH private key to the agent
          echo "$SSH_PRIVATE_KEY" | ssh-add -

          # Test SSH connection
          ssh -o StrictHostKeyChecking=no -p $SSH_PORT $CPANEL_USER@$CPANEL_HOST "echo 'SSH connection successful!'"

          # Upload Laravel files using rsync
          rsync -avz --exclude="node_modules" --exclude=".git" --exclude=".github" \
            -e "ssh -p $SSH_PORT" ./ $CPANEL_USER@$CPANEL_HOST:public_html/staging_backend/raw_files/

          # SSH into the server and run necessary commands
          ssh -p $SSH_PORT $CPANEL_USER@$CPANEL_HOST << EOF
            cd ~/public_html/staging_backend/raw_files
            rm -rf vendor composer.lock
            composer install --no-dev --optimize-autoloader
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache
            php artisan storage:link
            chmod -R 775 storage bootstrap/cache
            mv ~/public_html/staging_backend/raw_files/public/* ~/public_html/staging_backend/
            mv ~/public_html/staging_backend/raw_files/public/.htaccess ~/public_html/staging_backend/.htaccess
          EOF

          echo "Deployment to cPanel completed."
